---
import {
  getCollection,
  getEntries,
  getEntry,
  type CollectionEntry,
} from "astro:content";
import { split } from "string-ts";

import BlogLayout from "@/layouts/BlogLayout.astro";
import { cn, formatDate } from "@/lib/utils";
import Icon from "astro-icon";
export const prerender = true;

export async function getStaticPaths() {
  const collections = await getCollection("blogMeta");

  return collections.map((entry) => ({
    params: {
      blog_id: entry.id,
    },
  }));
}

const { blog_id } = Astro.params;
const pageMeta = await getEntry("blogMeta", blog_id);

const entries = await getEntries(
  Array.from({ length: pageMeta.data.maxPages }, (_, i) => ({
    collection: "blog",
    slug: `${blog_id}/${i + 1}` as CollectionEntry<"blog">["slug"],
  }))
);

const content = await Promise.all(
  entries.map(async (entry, idx) => {
    if (!entry) return {
      Content: () => null,
      page: (idx + 1).toString(),
    }
    const { Content } = await entry.render();
    return {
      Content,
      page: split(entry.slug, "/")[1],
    };
  })
);
---

<BlogLayout title={pageMeta.data.title} path={blog_id} collection="blogMeta">
  <!-- <section class="p-8 max-lg:block hidden">
    <article class="prose prose-invert prose-sm">
      {content.map(({ Content }) => <Content />)}
    </article>
  </section> -->

  <section class="w-full h-full relative">
    <div
      class="flex h-full overflow-x-auto background-scroll snap-x snap-mandatory scroll-smooth"
    >
      <div
        id={`page-0`}
        class="w-[100dvw] h-full shrink-0 text-[48rem] snap-start"
        style={
          {
            // backgroundColor: `hsl(${
            //   (idx * 360) / content.length
            // }, 100%, 50%, 0.2)`,
          }
        }
      />
      {
        Array.from({ length: content.length }, (_, idx) => (
          <div
            id={`page-${idx + 1}`}
            class="w-[100dvw] h-full shrink-0 text-[48rem] snap-start odd:lg:hidden last:max-lg:hidden"
            style={
              {
                // backgroundColor: `hsl(${
                //   (idx * 360) / content.length
                // }, 100%, 50%, 0.2)`,
              }
            }
          />
        ))
        
      }
      <div
            id={`page-${content.length + 1}`}
            class="w-[100dvw] h-full shrink-0 text-[48rem] snap-start"
            style={
              {
                // backgroundColor: `hsl(${
                //   (idx * 360) / content.length
                // }, 100%, 50%, 0.2)`,
              }
            }
          />
    </div>

    <!-- <div
      class="absolute top-0 left-0 w-full h-full grid grid-cols-8 grid-rows-4"
    >
      {
        Array.from({ length: 32 }, (_, i) => i + 1).map((pos) => (
          <div
            class={`row-${Math.ceil(pos / 8)}-col-${pos % 8}`}
            style={
              {
                // backgroundColor: `hsl(${(pos * 360) / 32}, 100%, 50%, 0.2)`,
              }
            }
          />
        ))
      }
    </div> -->

    <div
      class="absolute top-1/2 left-1/2 max-lg:h-[min(36rem,80%)] lg:w-[min(48rem,80%)] aspect-[9/16] lg:aspect-[2/1] book-parent antialiased font-serif"
      style={{
        "--total": content.length + 1,
      }}
    >
      <div class="max-lg:hidden" />
      <article
        class={cn(
          "rounded-lg absolute prose prose-invert prose-sm aspect-[9/16] lg:aspect-square bg-neutral-900 p-4 w-full lg:w-1/2 shadow-neutral-950 shadow-lg",
          "flex flex-col gap-2 items-center justify-center"
        )}
        style={{
          "--offset": 0,
        }}
        transition:name="book"
      >
        <h2 transition:name="book-title">
          {pageMeta.data.title}
        </h2>
        <p
          transition:name="book-date"
        >
          <Icon name="noto:calendar" class="inline mr-1 w-4 h-4" />
          {formatDate(pageMeta.data.date)}
        </p>
      </article>
      {
        content.map(({ Content, page }, idx) => (
          // <BookPage page={parseInt(page)} meta={pageMeta.data}>
          <>
            <article
              class={cn(
                "prose prose-invert prose-sm text-pretty rounded-lg absolute h-full bg-neutral-900 p-4 w-full lg:w-1/2 shadow-neutral-950 shadow-lg"
              )}
              style={{
                "--offset": idx + 1,
              }}
            >
              <Content />
              <p class={cn(
                "text-xs absolute bottom-0 right-0 text-balance p-2",
                idx % 2 === 0 && "lg:left-0"
              )}
              >
                {page}
              </p>
              <!-- 
              <a
                href={`#page-${
                  Math.ceil(idx / 2) * 2 + (idx % 2 === 1 ? 1 : -1)
                }`}
                class={cn(
                  "absolute w-12 h-full from-amber-200/20 to-amber-200/0 pointer-events-auto top-0 items-center justify-center transition-all rounded-lg hidden lg:flex"
                )}
              >
                <Icon name="lgi:chevron-right" class="w-6 h-6 text-amber-200" />
              </a>
                <a
                  href={`#page-${idx - 1}`}
                  class={cn(
                    "left-0 left-link absolute w-12 h-full from-amber-200/20 to-amber-200/0 pointer-events-auto top-0 flex items-center justify-center transition-all rounded-lg lg:hidden"
                  )}
                >
                  <Icon name="lgi:chevron-right" class="w-6 h-6 text-amber-200" />
                </a>
                <a
                  href={`#page-${idx + 1}`}
                  class={cn(
                    "right-0 right-link absolute w-12 h-full from-amber-200/20 to-amber-200/0 pointer-events-auto top-0 flex items-center justify-center transition-all rounded-lg lg:hidden"
                  )}
                >
                  <Icon name="lgi:chevron-right" class="w-6 h-6 text-amber-200" />
                </a>
              -->
            </article>
          </>
          // </BookPage>
        ))
      }
      <article
        class={cn(
          "rounded-lg absolute prose prose-invert prose-sm aspect-[9/16] lg:aspect-square bg-neutral-900 p-4 w-full lg:w-1/2 shadow-neutral-950 shadow-lg",
          "flex flex-col gap-2 items-center justify-center"
        )}
        style={{
          "--offset": content.length + 1,
        }}
      >
        <p class="font-serif text-xs break-words text-center text-balance">
          You've reached the end of the book.
         
        </p>
         <a href="/blog" class="pointer-events-auto transition-all hover:-translate-y-1">
            Read other books
          </a>
      </article>
    </div>
  </section>

  <style lang="scss" is:global>
    :root {
      --font-size-base: 16px
    }

    $base: translateX(-50%) translateY(-50%);

    section {
      perspective: 1000px;
      overflow: hidden;
      timeline-scope: --background-scroll;
    }

    .background-scroll {
      scroll-timeline: --background-scroll x;
    }

    .book-parent {
      @apply transition-all pointer-events-none;
      perspective: 1000px;
      transform-style: preserve-3d;
      transform: $base rotateX(10deg);
    }

    @for $row from 1 through 4 {
      @for $col from 1 through 8 {
        div:has(.row-#{$row}-col-#{$col}:hover) ~ div {
          transform: $base
            rotateY(calc((#{$col} - 4.5) * 2deg))
            rotateX(calc(10deg + (#{$row} - 2.5) * -2deg));
        }
      }
    }

    @keyframes flip-odd {
      from {
        rotate: y 170deg;
      }
      to {
        rotate: y 0deg;
      }
    }

    @keyframes flip-even {
      from {
        rotate: y -10deg;
      }
      to {
        rotate: y -180deg;
      }
    }

    .left-link {
      background-image: radial-gradient(
        200% 50% at left 50%,
        var(--tw-gradient-from),
        var(--tw-gradient-to) 50%
      );

      // hover gradient animation
      background-size: 200% 100%;
      background-position: 200% 0;
      background-repeat: no-repeat;

      &:hover {
        background-position: right;
      }

      & > svg {
        @apply rotate-180;
      }
    }

    .right-link {
      @apply right-0 transition-all;
      // circular gradient right most radius
      // longer vertically than horizontally
      background-image: radial-gradient(
        200% 50% at right 50%,
        var(--tw-gradient-from),
        var(--tw-gradient-to) 50%
      );

      // hover gradient animation
      background-size: 200% 100%;
      background-position: -100% 0;
      background-repeat: no-repeat;

      &:hover {
        background-position: left;
      }
    }

    // even article
    .even-pattern {
      @apply right-0 origin-left transition-all pointer-events-none;
      rotate: y calc((var(--total) - var(--offset)) * -0.1deg);
      animation: flip-even linear forwards;
      animation-timeline: --background-scroll;
      animation-range-start: calc(var(--offset) / var(--total) * 100% + 0.1%);
      animation-range-end: calc(
        (var(--offset) + 1) / var(--total) * 100% + 0.1%
      );

      & > a:first-of-type {
        @apply right-0 transition-all right-link;
      }
    }

    // odd article
    .odd-pattern {
      @apply left-0 origin-right transition-all pointer-events-none;
      rotate: y calc(180deg - (var(--total) - var(--offset)) * 0.1deg);
      animation: flip-odd linear forwards;
      animation-timeline: --background-scroll;
      animation-range-start: calc(
        (var(--offset) - 1) / var(--total) * 100% + 0.5%
      );
      animation-range-end: calc(var(--offset) / var(--total) * 100% + 0.5%);

      & > a:first-of-type {
        @apply left-0 transition-all left-link;
      }
    }

    article:nth-child(2n + 1) {
      @media screen and (min-width: 1024px) {
        @apply odd-pattern;
      }
      @media screen and (max-width: 1024px) {
        @apply even-pattern;
      }
    }
    article:nth-child(2n) {
      @apply even-pattern;
    }
  </style>
</BlogLayout>
